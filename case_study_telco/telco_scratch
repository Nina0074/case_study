--gender distribution
SELECT 
    gender AS gender,
    COUNT(*) AS Count,
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM `my-project-number-one-439622.telcochurn.telco`)) AS Percentage
FROM `my-project-number-one-439622.telcochurn.telco`
GROUP BY gender
ORDER BY Percentage DESC;

--senior citizen distribution
SELECT 
    seniorcitizen AS senior_citizen,
    COUNT(*) AS Count,
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM `my-project-number-one-439622.telcochurn.telco`)) AS Percentage
FROM `my-project-number-one-439622.telcochurn.telco`
GROUP BY seniorcitizen
ORDER BY Percentage DESC;

--dependents distribution
SELECT 
    dependents AS dependents,
    COUNT(*) AS Count,
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM `my-project-number-one-439622.telcochurn.telco`)) AS Percentage
FROM `my-project-number-one-439622.telcochurn.telco`
GROUP BY dependents
ORDER BY Percentage DESC;

--partner distribution
SELECT 
    partner AS partner,
    COUNT(*) AS Count,
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM `my-project-number-one-439622.telcochurn.telco`)) AS Percentage
FROM `my-project-number-one-439622.telcochurn.telco`
GROUP BY partner
ORDER BY Percentage DESC;

--contract distribution
SELECT 
    contract AS contract,
    COUNT(*) AS Count,
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM `my-project-number-one-439622.telcochurn.telco`)) AS Percentage
FROM `my-project-number-one-439622.telcochurn.telco`
GROUP BY contract
ORDER BY Percentage DESC;



--churn distribution
SELECT 
  COUNT(*) AS total_customers, 
  COUNT(CASE WHEN churn = TRUE THEN 1 END) AS churned_customers,
  COUNT(CASE WHEN churn = FALSE THEN 1 END) AS retained_customers
FROM `my-project-number-one-439622.telcochurn.telco`;

--churn by gender
SELECT 
  gender,
  COUNT(*) AS total_customers, 
  COUNT(CASE WHEN churn = TRUE THEN 1 END) AS churned_customers,
  ROUND(COUNT(CASE WHEN churn = TRUE THEN 1 END) * 100.0 / COUNT(*), 2) AS churn_rate
FROM `my-project-number-one-439622.telcochurn.telco`
GROUP BY gender;

--churn by senior citizens
SELECT 
  seniorcitizen,
  COUNT(*) AS total_customers, 
  COUNT(CASE WHEN churn = TRUE THEN 1 END) AS churned_customers,
  ROUND(COUNT(CASE WHEN churn = TRUE THEN 1 END) * 100.0 / COUNT(*), 2) AS churn_rate
FROM `my-project-number-one-439622.telcochurn.telco`
GROUP BY seniorcitizen;

--churn by partner
SELECT
  partner,
  COUNT(*) AS total_customers, 
  COUNT(CASE WHEN churn = TRUE THEN 1 END) AS churned_customers,
  ROUND(COUNT(CASE WHEN churn = TRUE THEN 1 END) * 100.0 / COUNT(*), 2) AS churn_rate
FROM `my-project-number-one-439622.telcochurn.telco`
GROUP BY partner;

--churn by dependents
SELECT 
  dependents,
  COUNT(*) AS total_customers, 
  COUNT(CASE WHEN churn = TRUE THEN 1 END) AS churned_customers,
  ROUND(COUNT(CASE WHEN churn = TRUE THEN 1 END) * 100.0 / COUNT(*), 2) AS churn_rate
FROM `my-project-number-one-439622.telcochurn.telco`
GROUP BY dependents;

--churn by service usage and churn
SELECT 
  internetService,
  COUNT(*) AS total_customers,
  COUNT(CASE WHEN churn = TRUE THEN 1 END) AS churned_customers,
  ROUND(COUNT(CASE WHEN churn = TRUE THEN 1 END) * 100.0 / COUNT(*), 2) AS churn_rate
FROM `my-project-number-one-439622.telcochurn.telco`
GROUP BY internetService;

--churn rate by contract type
SELECT 
  contract,
  COUNT(*) AS total_customers,
  COUNT(CASE WHEN churn = TRUE THEN 1 END) AS churned_customers,
  ROUND(COUNT(CASE WHEN churn = TRUE THEN 1 END) * 100.0 / COUNT(*), 2) AS churn_rate
FROM `my-project-number-one-439622.telcochurn.telco`
GROUP BY contract;

--churn rate by tenure
SELECT 
  CASE 
    WHEN tenure < 12 THEN '0-12 months'
    WHEN tenure BETWEEN 12 AND 24 THEN '12-24 months'
    WHEN tenure BETWEEN 24 AND 36 THEN '24-36 months'
    ELSE '36+ months'
  END AS tenure_group,
  COUNT(*) AS total_customers,
  COUNT(CASE WHEN churn = TRUE THEN 1 END) AS churned_customers,
  ROUND(COUNT(CASE WHEN churn = TRUE THEN 1 END) * 100.0 / COUNT(*), 2) AS churn_rate
FROM `my-project-number-one-439622.telcochurn.telco`
GROUP BY tenure_group;

--average monthly charge versus churn
SELECT Churn, 
       AVG(MonthlyCharges) AS AvgMonthlyCharges
FROM `my-project-number-one-439622.telcochurn.telco`
GROUP BY Churn;

--monthly charges versus churn
WITH MonthlyChargesWithPercentiles AS (
  SELECT
    Churn,
    MonthlyCharges,
    PERCENTILE_CONT(MonthlyCharges, 0.25) OVER (PARTITION BY Churn) AS q1_monthly_charges,
    PERCENTILE_CONT(MonthlyCharges, 0.50) OVER (PARTITION BY Churn) AS median_monthly_charges,
    PERCENTILE_CONT(MonthlyCharges, 0.75) OVER (PARTITION BY Churn) AS q3_monthly_charges
  FROM `my-project-number-one-439622.telcochurn.telco`
)

SELECT
  Churn,
  MIN(MonthlyCharges) AS min_monthly_charges,
  MAX(MonthlyCharges) AS max_monthly_charges,
  ANY_VALUE(q1_monthly_charges) AS q1_monthly_charges,
  ANY_VALUE(median_monthly_charges) AS median_monthly_charges,
  ANY_VALUE(q3_monthly_charges) AS q3_monthly_charges
FROM MonthlyChargesWithPercentiles
GROUP BY Churn
ORDER BY Churn;

--churn vs monthly charges
SELECT
  Churn,
  APPROX_QUANTILES(MonthlyCharges, 2)[OFFSET(1)] AS Median_MonthlyCharges
FROM   `my-project-number-one-439622.telcochurn.telco`
GROUP BY Churn


--tenure distribution of churned vs. non-churned customers 
  SELECT
  Churn,
  CASE
    WHEN Tenure BETWEEN 0 AND 12 THEN '0-12 months'
    WHEN Tenure BETWEEN 13 AND 24 THEN '13-24 months'
    WHEN Tenure BETWEEN 25 AND 36 THEN '25-36 months'
    WHEN Tenure BETWEEN 37 AND 48 THEN '37-48 months'
    WHEN Tenure BETWEEN 49 AND 60 THEN '49-60 months'
    WHEN Tenure BETWEEN 61 AND 72 THEN '61-72 months'
    ELSE '72+ months' -- Handle any tenures above 72
  END AS TenureRange,
  COUNT(*) AS CustomerCount
FROM
  `my-project-number-one-439622.telcochurn.telco`
GROUP BY
  Churn,
  TenureRange
ORDER BY
  Churn,
  TenureRange;



--churn rate vs tech support 
SELECT 
  techsupport,
  COUNT(*) AS total_customers,
  COUNT(CASE WHEN churn = TRUE THEN 1 END) AS churned_customers,
  ROUND(COUNT(CASE WHEN churn = TRUE THEN 1 END) * 100.0 / COUNT(*), 2) AS churn_rate
FROM `my-project-number-one-439622.telcochurn.telco`
GROUP BY techsupport;

-- Streaming services (TV and Movies)
SELECT StreamingTV, StreamingMovies, COUNT(*) AS CustomerCount
FROM `my-project-number-one-439622.telcochurn.telco`
GROUP BY StreamingTV, StreamingMovies;


--online security
SELECT onlinesecurity, 
       COUNT(*) AS total_customers, 
       COUNT(CASE WHEN churn = TRUE THEN 1 END) AS churned_customers,
       ROUND(COUNT(CASE WHEN churn = TRUE THEN 1 END) * 100.0 / COUNT(*), 2) AS churn_rate
FROM `my-project-number-one-439622.telcochurn.telco`
GROUP BY onlinesecurity;


--onlinesecurity vs monthly charges
SELECT onlinesecurity, 
       AVG(MonthlyCharges) AS AvgMonthlyCharges,
      FROM `my-project-number-one-439622.telcochurn.telco`
GROUP BY onlinesecurity;

-- Compare monthly charges for customers with tech support vs those without
SELECT TechSupport, 
       AVG(MonthlyCharges) AS AvgMonthlyCharges
FROM `my-project-number-one-439622.telcochurn.telco`
GROUP BY TechSupport;

-- Compare monthly charges for customers with online security vs those without
SELECT OnlineSecurity, 
       AVG(MonthlyCharges) AS AvgMonthlyCharges
FROM `my-project-number-one-439622.telcochurn.telco`
GROUP BY OnlineSecurity;




--correlation between monthly charges and tenure 
SELECT 
    CORR(tenure, MonthlyCharges) AS correlation_value
FROM `my-project-number-one-439622.telcochurn.telco`;

--missing value
SELECT 
    COUNT(*) AS total_rows,
    SUM(CASE WHEN tenure IS NULL THEN 1 ELSE 0 END) AS missing_tenure,
    SUM(CASE WHEN MonthlyCharges IS NULL THEN 1 ELSE 0 END) AS missing_monthly_charges
FROM `my-project-number-one-439622.telcochurn.telco`;

--summary
SELECT 
    COUNT(*) AS total_rows,
    AVG(tenure) AS avg_tenure,
    STDDEV(tenure) AS std_tenure,
    AVG(MonthlyCharges) AS avg_monthly_charges,
    STDDEV(MonthlyCharges) AS std_monthly_charges
FROM `my-project-number-one-439622.telcochurn.telco`;

--correlation between monthly charges and tenure 
SELECT 
    CORR(tenure, MonthlyCharges) AS correlation_value
FROM `my-project-number-one-439622.telcochurn.telco`;
